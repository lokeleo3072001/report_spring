java.util.NoSuchElementException: next on empty iterator
occurred in the presentation compiler.

action parameters:
offset: 2815
uri: file:///D:/spring/springmvc/report_spring/demo/src/main/java/com/example/demo/controller/indexcontroller.java
text:
package com.example.demo.controller;

import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.demo.entity.Email;
import com.example.demo.entity.info_product;
import com.example.demo.service.productService;

import jakarta.validation.Valid;

@Controller
public class indexcontroller {
    private static Pattern pattern;
    private Matcher matcher;
    @Autowired
    private productService service;

    private static final String EMAIL_REGEX = "^[A-Za-z0-9]+[A-Za-z0-9]*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)$";

    public indexcontroller() {
        pattern = Pattern.compile(EMAIL_REGEX);
    }
    private boolean validate(String regex) {
        matcher = pattern.matcher(regex);
        return matcher.matches();
    }

    @GetMapping("")
    public String home(){
        return "index";
    }

    @GetMapping("validateEmail")
    public String option1(){
        return "validateEmail";
    }

    @PostMapping("validate")
    public String validateEmail(@RequestParam("email") String email, Model model){
        if(!validate(email)){
            model.addAttribute("message", "error");
            return "index";
        }
        System.out.println(email);
        return "success";
    }

    @GetMapping(value="worldclock")
    public String getTime(ModelMap model, @RequestParam(name="city", required = false, defaultValue = "Asia/Ho_Chi_Minh") String city) {
        Date date = new Date();
        TimeZone local = TimeZone.getDefault();
        TimeZone locale = TimeZone.getTimeZone(city);
        long locale_time = date.getTime() +
        (locale.getRawOffset() - local.getRawOffset());
        date.setTime(locale_time);
        model.addAttribute("city",city);
        model.addAttribute("date",date);
        return "time";
    }

    @GetMapping(value = "findAllProduct")
    public String getAllProduct(Model model){
        List<info_product> list = service.findAllProduct();
        model.addAttribute("listProduct", list);
        return "listProduct";
    }

    @PostMapping(value="search")
    public String searchProduct(@RequestParam("name") String name){
        mode@@
        return "";
    }

    @PostMapping("changeProduct")
    public String selectProduct(Model model, @RequestParam("id") Long id){
        info_product product = service.findProduct(id);
        model.addAttribute("product", product);
        return "changeProduct";
    }

    @PostMapping("accept")
    public String successChange(@RequestParam("id") Long id, @RequestParam("name") String name){
        service.acceptChangeProduct(id, name);
        return "success";
    }

    @PostMapping("deleteProduct")
    public String deleteProduct(@RequestParam("id") Long id, Model model){
        service.deleteProduct(id);
        List<info_product> list = service.findAllProduct();
        model.addAttribute("listProduct", list);
        return "listProduct";
    }

    @GetMapping("createProduct")
    public String addNewProduct(Model model){
        info_product product = new info_product();

        model.addAttribute("product", product);
        return "createProduct";
    }

    @PostMapping(value = "newProduct", consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE})
    public String newProduct(@Valid @ModelAttribute("info_product") info_product product, BindingResult result, Model model){
        if(!result.hasErrors()){
            service.newProduct(product);
        }
        List<info_product> list = service.findAllProduct();
        model.addAttribute("listProduct", list);
        return "listProduct";  
    }

    @GetMapping(value = "saveEmail")
    public String saveInfoEmail(Model model){
        model.addAttribute("email", new Email());
        model.addAttribute("languages", new String[]{"English", "Vietnamese", "Japanese", "Chinese"});
        model.addAttribute("sizes", new int[]{5,10,15,20,25,50,100});
        return "formInfoEmail";
    }

    @PostMapping("saveInfo")
    public String saveInfoEmail(@ModelAttribute("email") Email email, Model model){
        model.addAttribute("email", email);
        return "infoEmail";
    }
}



error stacktrace:
scala.collection.Iterator$$anon$19.next(Iterator.scala:973)
	scala.collection.Iterator$$anon$19.next(Iterator.scala:971)
	scala.collection.mutable.MutationTracker$CheckedIterator.next(MutationTracker.scala:76)
	scala.collection.IterableOps.head(Iterable.scala:222)
	scala.collection.IterableOps.head$(Iterable.scala:222)
	scala.collection.AbstractIterable.head(Iterable.scala:933)
	dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:168)
	scala.meta.internal.pc.MetalsDriver.run(MetalsDriver.scala:45)
	scala.meta.internal.pc.completions.CompletionProvider.completions(CompletionProvider.scala:46)
	scala.meta.internal.pc.ScalaPresentationCompiler.complete$$anonfun$1(ScalaPresentationCompiler.scala:119)
